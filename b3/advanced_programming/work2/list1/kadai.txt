1-1
写経せよ。リスト 1～リスト 4 を打ち込み，そして実行せよ。コピペではなく，プログラムの意味を考え
ながらキーボードで一文字ずつ打ち込むこと。これまでに 1 万行以上の規模のプログラムを書いた経験が
あれば，このプログラムの意味を考えつつコピペしてもよい。

1-2
リスト 4 の World クラスと Action クラスを読んでその役割を説明せよ。「宣教師と人食い人」の問題に
おける状態を，プログラムでどのように表現しているのかを調べよ。また、リスト 2 の State クラスの役
割を説明せよ。さらに，リスト 3 の Solver クラスが実現している探索手法を特定せよ。レポートでは，判
断の根拠となるプログラムの該当部分を示すこと。

　Worldクラスについて、missionary,cannibalを宣教師と人食い人がこちら岸にいる人の数を表している。またboatはボートが
こちら側にあれば1、向こう側にあれば0で表している。また初期値として、宣教師と人食い人が三人ずつおり、ボートもある
ルートの状態を表している。toString()は宣教師と人食い人とボートの数を表示する関数である。
equals(world)は、引数と等しいかどうかを返す関数である。clone()は、コピーしたものを返す関数である。
isGoal()はそのworldがゴール状態であるかどうかを返す関数である。getAllActions()はworldに対して全てのアクションを試し
その結果をリストに入れて返り値にする関数である。perform()はactionをworldに適応して、適応後のworldを返す関数である。
isValid()はその状態があり得るかを返す関数である。例えば、宣教師の数が0～3の間に納まっているかどうかや、
宣教師の数が人食い人の数より小さくなっていないかなどである。
　Actionクラスについて、missionary,cannibal,boatをあるworldの状態からどのようなアクションをするかを表す
値にしている。例えばmissionary=-1であれば、向こう岸にボートを使って宣教師を一人渡らせるというようにする。
コンストラクタとして、引数としてmissionary,cannibal,boatを与えれば、初期化できる。getAllActions()ではある状態から
あり得るかどうかは別として、全てのアクションの仕方を格納したリストを返す関数である。
　Stateクラスでは、ある状態を一つのノードとしてみて木構造でつながっているとき、parent（親ノード）にactionをすると
worldになるというように変数定義されている。isGoal()は、その状態がゴール状態かどうかを示す関数である。
幅優先探索をしている。根拠となる部分は以下の通り。
(Solverクラス内)
State search(State root){
    ArrayList<State> openList = new ArrayList<State>();
    openList.add(root);

    while(openList.size() > 0){
        State state = this.get(openList);
        if(state.isGoal()){
            return state;
        }
        ArrayList<State> children = this.expand(state);
        openList = this.concat(openList, children);
    }

    return null;
}

1-3
リスト 1～リスト 4 を改良し，性能を評価できるようにすること。プログラムを変更した部分を，レポー
トに転記し，変更部分について詳細に説明すること。

Solverのインスタンス変数に
int evaluation = Integer.MAX_VALUE;
と追加した。ここでevaluationとは評価値である。またSolverクラスのsolver()内を
if(state.isGoal()){
    evaluation = openList.size();
    return state;
}
と変更した。ここで、openListの長さをevaluationに代入している。
評価値を出力するためにSolverクラス内に
void printEvaluation(){
    System.out.println("評価値："+this.evaluation);
}
を追加した。


1-4
リスト 1～リスト 4 の解の表示方法を改良せよ。具体的には，初期状態から目標状態に至る手順を順番に
表示するようにすること。最初に 1 番目に実行する行動表示するという意味である。



1-5
2 つの World オブジェクト間が同値か判定できるようにしたい。そのために、World クラスの equals メ
ソッドおよび hashCode メソッドを実装せよ。また、本演習で学んだ単体テストにより、動作確認をせよ。
テストケースも提出すること。

1-6
リスト 1～リスト 4 を改良し，横型探索，縦型探索，繰り返し回避型横型探索，繰り返し回避型縦型探索
でこの問題を解け。各探索手法の性能を比較すること。
レポートには各手法を実現するためのプログラム上の変更部分を転記し，変更部分について詳細に説明
すること。

横型はオープンリスト長が13834となった。
縦型は、探索が終わらずに無限となった。
繰り返し回避型横型探索はオープンリスト長が3となった。
繰り返し回避型縦型探索はオープンリスト長が9となった。




